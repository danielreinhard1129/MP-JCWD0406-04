generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  firstName      String
  lastName       String
  referralCode   String          @unique
  password       String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isDeleted      Boolean         @default(false)
  CouponDiscount CouponDiscount?
  Event          Event[]
  points         ReferralPoints?
  role           Role?
}

model Event {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  locationId     Int
  startDate      DateTime
  endDate        DateTime
  price          Float
  limit          Int
  booked         Int              @default(0)
  thumbnail      String
  userId         Int
  createdAt      DateTime         @default(now())
  updateAt       DateTime         @updatedAt
  location       Location         @relation(fields: [locationId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  Event_category Event_category[]

  @@index([locationId], map: "Event_locationId_fkey")
  @@index([userId], map: "Event_userId_fkey")
}

model Location {
  id        Int      @id @default(autoincrement())
  city      String
  country   String
  createdAt DateTime @default(now())
  Event     Event[]
}

model Event_category {
  id         Int      @id @default(autoincrement())
  categoryId Int
  eventId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id])
  event      Event    @relation(fields: [eventId], references: [id])

  @@index([categoryId], map: "Event_category_categoryId_fkey")
  @@index([eventId], map: "Event_category_eventId_fkey")
}

model Category {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  isDeleted      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Event_category Event_category[]
}

model Role {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

model CouponDiscount {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  couponCode         String
  discountPersentase Int
  dateReceived       DateTime @default(now())
  expiresOn          DateTime
  user               User     @relation(fields: [userId], references: [id])
}

model ReferralPoints {
  id          Int      @id @default(autoincrement())
  pointEarned Int
  dateEarned  DateTime @default(now())
  expiresOn   DateTime
  userId      Int      @unique
  isUsed      Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
}
